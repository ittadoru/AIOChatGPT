import ollama

from create_bot import storage, bot, token

from asyncio import to_thread
import aiohttp

from log import logger
from PIL import Image

import io
import os

MAX_HISTORY_LENGTH = 15
PHOTO_SAVE_PATH = "photos"
URI_INFO = f"https://api.telegram.org/bot{token}/getFile?file_id="
URI = f"https://api.telegram.org/file/bot{token}/"

async def model_picture(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é."""
    user_id = message.from_user.id
    stream_message = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—Ä–∞–Ω–µ–µ

    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
        stream_message = await message.answer('üëÄ –ü—ã—Ç–∞—é—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å...')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await storage.get_data(user_id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if 'history' not in user_data:
            user_data['history'] = []

        if 'images' not in user_data:
            user_data['images'] = []

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å Telegram
        file_id = message.photo[-1].file_id
        file_path = f"{PHOTO_SAVE_PATH}/{file_id}.png"
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
        user_data['images'].append(file_id)

        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            async with session.get(URI_INFO + file_id) as response:
                response_json = await response.json()
                img_path = response_json['result']['file_path']

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with session.get(URI + img_path) as img_response:
                img_bytes = await img_response.read()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pillow
        img_buffer = io.BytesIO(img_bytes)
        img = Image.open(img_buffer)
        img.save(file_path, format="PNG")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è) –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ
        caption = message.caption if message.caption else "There is no text"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_data['history'].append({"role": "system", "content": "Please provide a short answer."})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_data['history'].append({"role": "user", "content": caption, 'images': [file_path]})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏ –±–µ–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        try:
            response = await to_thread(
                ollama.chat,
                model="llama3.2-vision",
                messages=user_data['history'],
                stream=False
            )
            finally_response = response['message']['content']
            logger.info(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ Vision –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ollama.chat: {e}")
            await message.answer("‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–æ–º –º–æ–¥–µ–ª–∏
        user_data['history'].append({"role": "assistant", "content": finally_response})

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(user_data['history']) > MAX_HISTORY_LENGTH:
            user_data['history'] = user_data['history'][-MAX_HISTORY_LENGTH:]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await storage.set_data(user_id, user_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if stream_message:
            await bot.edit_message_text(
                chat_id=stream_message.chat.id,
                message_id=stream_message.message_id, 
                text=finally_response,
                parse_mode=None
            )


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if stream_message:
            await bot.edit_message_text(
                chat_id=stream_message.chat.id,
                message_id=stream_message.message_id,
                text="‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=None
            )
